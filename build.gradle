buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        //noinspection JCenterRepository
        jcenter()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:${forge_gradle_version}"
        classpath "org.spongepowered:mixingradle:${mixin_gradle_version}"
        classpath "org.parchmentmc:librarian:${librarian_version}"
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

jarJar.enable()

group = mod_group_id
version = mod_version

java {
    archivesBaseName = mod_id + "-forge"
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"
    copyIdeResources = true
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
}

final String mixinName = "${mod_id}.mixins.json"
final String refmapName = archivesBaseName + "-refmap.json"

mixin {
    add sourceSets.main, refmapName
}

jar {
    //noinspection GroovyAssignabilityCheck
    manifest {
        attributes([
                'Specification-Title': "${mod_name}",
                'Specification-Vendor': "${mod_authors}",
                'Specification-Version': "${mod_version}",
                'Implementation-Title': "${mod_name}",
                'Implementation-Version': project.jar.archiveVersion,
                'Implementation-Vendor': "${mod_authors}",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs': mixinName
        ])
    }
}

processResources {
    inputs.property "id", mod_id
    inputs.property "name", mod_name
    inputs.property "version", mod_version
    inputs.property "license", mod_license
    inputs.property "group_id", mod_group_id
    inputs.property "authors", mod_authors
    inputs.property "description", mod_description

    filesMatching("META-INF/mods.toml") {
        expand "id": mod_id, "name": mod_name, "version": mod_version, "license": mod_license, "group_id": mod_group_id, "authors": mod_authors, "description": mod_description
    }

    inputs.property "name", mod_name
    filesMatching("pack.mcmeta") {
        expand "name": mod_name
    }

    inputs.property "refmap", refmapName
    filesMatching(mixinName) {
        expand "refmap": refmapName
    }
}